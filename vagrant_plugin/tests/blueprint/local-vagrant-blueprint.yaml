tosca_definitions_version: cloudify_dsl_1_2

description: >
  Add later

imports:
  - http://www.getcloudify.org/spec/cloudify/3.3.1/types.yaml
  - https://raw.githubusercontent.com/davidginzbourg/cloudify-vagrant-plugin/developement/plugin.yaml

inputs:

  vbox:
    description: VBox box URL or shortened name

  vm_name_prefix:
    description: Virtual machine's display name

  vm_cpus:
    description: Amount of CPUs to be used by the virtual machine

  vm_memory:
    description: Amount of memory to be used by the virtual machine

  cidr:
    description: >
      The CIDR to be used to generate an IP address for the machine.
      Also accepts an IP address.

  additional_vagrant_settings:
    description: >
      Accepts a dictionary with vagrant config parameters. The key and
      values will be printed into the Vagrant file as "key= value", at the
      vagrant machine configuration part.
      Note: Make sure you use 'config.' as the prefix of the configuration key.
  additional_virtualbox_settings:
    description: >
      Accepts a dictionary with vagrant config parameters. The key and
      values will be printed into the Vagrant file as "key= value", at
      the virtualbox machine configuration part.
      Note: Make sure you use 'vbox.' as the prefix of the configuration
      key.
  provision_sets:
    description: >
      A list of dictionaries, each dictionary represents a provision 'set'.
      Each provision 'set' has:
        A "suffix" key - a suffix that will appear in Vagrantfile, at the
         provision method.
        A "type" key - the provision type (anything that Vagrant accepts).
        A "provisions" key - the list of the provision command.
          each command is a dictionary by itself, the key will be the
          Vagrant command and the value will be the command itself.
          For example: {"inline": "echo Hellow, World"}

node_templates:
  vm1:
    type: cloudify.nodes.Compute
    properties:
      ip: { get_input: cidr }
      install_agent: false
    instances:
      deploy: 2
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: vagrant.vagrant_plugin.vbox.tasks.create
          inputs:
            vbox: { get_input: vbox }
            vm_name_prefix: { get_input: vm_name_prefix }
            vm_cpus: { get_input: vm_cpus }
            vm_memory: { get_input: vm_memory }
            additional_vagrant_settings: {}
            additional_virtualbox_settings: {}
            provision_sets: { get_input: provision_sets }
        configure:
          implementation: vagrant.vagrant_plugin.vbox.tasks.configure
        stop:
          implementation: vagrant.vagrant_plugin.vbox.tasks.stop
        delete:
          implementation: vagrant.vagrant_plugin.vbox.tasks.delete



  vm2:
    type: cloudify.nodes.Compute
    properties:
      ip: {}
      install_agent: false
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: vagrant.vagrant_plugin.vbox.tasks.create
          inputs:
            vbox: { get_input: vbox }
            vm_name_prefix: { get_input: vm_name_prefix }
            vm_cpus: { get_input: vm_cpus }
            vm_memory: { get_input: vm_memory }
            additional_vagrant_settings: {}
            additional_virtualbox_settings: {}
            provision_sets: {}
        configure:
          implementation: vagrant.vagrant_plugin.vbox.tasks.configure
        stop:
          implementation: vagrant.vagrant_plugin.vbox.tasks.stop
        delete:
          implementation: vagrant.vagrant_plugin.vbox.tasks.delete