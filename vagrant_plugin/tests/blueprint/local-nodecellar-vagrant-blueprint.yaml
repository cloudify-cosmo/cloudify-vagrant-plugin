tosca_definitions_version: cloudify_dsl_1_2

description: >
  Add later

imports:
  - http://www.getcloudify.org/spec/cloudify/3.2.1/types.yaml
  - http://www.getcloudify.org/spec/diamond-plugin/1.2.1/plugin.yaml
  - types/nodecellar.yaml
  - /home/david/cloudify-vagrant-plugin/plugin.yaml

inputs:

  vbox:
    description: VBox box URL or shortened name

  vm_name_prefix:
    description: Virtual machine's display name

  vm_cpus:
    description: Amount of CPUs to be used by the virtual machine

  vm_memory:
    description: Amount of memory to be used by the virtual machine

  vm_ip_address:
    description: >
      The IPv4 address which the virtual machine will be configured with.
      Provide a CIDR to automatically generate an IP by the CIDR.

  additional_vagrant_settings:
    description: >
      Accepts a dictionary with vagrant config parameters. The key and
      values will be printed into the Vagrant file as "key= value", at the
      vagrant machine configuration part.
      Note: Make sure you use 'config.' as the prefix of the configuration key.
  additional_virtualbox_settings:
    description: >
          Accepts a dictionary with vagrant config parameters. The key and
          values will be printed into the Vagrant file as "key= value", at
          the virtualbox machine configuration part.
          Note: Make sure you use 'vbox.' as the prefix of the configuration
          key.
  provision_sets:
    description:
    # TODO add description

node_templates:
  mongod_vm:
    type: cloudify.nodes.Root
    instances:
      deploy: 2
    interfaces:
        cloudify.interfaces.lifecycle:
            start:
                implementation: vagrant.vagrant_plugin.vbox.tasks.start
                inputs:
                  vbox: { get_input: vbox }
                  vm_name_prefix: { get_input: vm_name_prefix }
                  vm_cpus: { get_input: vm_cpus }
                  vm_memory: { get_input: vm_memory }
                  vm_ip_address: { get_input: vm_ip_address }
                  additional_vagrant_settings: {}
                  additional_virtualbox_settings: {}
                  provision_sets: {}
        cloudify.interfaces.monitoring_agent:
                  install:
                    implementation: diamond.diamond_agent.tasks.install
                    inputs:
                      diamond_config:
                        interval: 1
                  start: diamond.diamond_agent.tasks.start
                  stop: diamond.diamond_agent.tasks.stop
                  uninstall: diamond.diamond_agent.tasks.uninstall
        cloudify.interfaces.monitoring:
                  start:
                    implementation: diamond.diamond_agent.tasks.add_collectors
                    inputs:
                      collectors_config:
                        CPUCollector: {}
                        MemoryCollector: {}
                        LoadAverageCollector: {}
                        DiskUsageCollector:
                          config:
                            devices: x?vd[a-z]+[0-9]*$
                        NetworkCollector: {}


  nodejs_vm:
    type: cloudify.nodes.Root
    interfaces:
        cloudify.interfaces.lifecycle:
            start:
                implementation: vagrant.vagrant_plugin.vbox.tasks.start
                inputs:
                  vbox: { get_input: vbox }
                  vm_name_prefix: { get_input: vm_name_prefix }
                  vm_cpus: { get_input: vm_cpus }
                  vm_memory: { get_input: vm_memory }
                  vm_ip_address: {}
                  additional_vagrant_settings: {}
                  additional_virtualbox_settings: {}
                  provision_sets: {}
        cloudify.interfaces.monitoring_agent:
                      install:
                        implementation: diamond.diamond_agent.tasks.install
                        inputs:
                          diamond_config:
                            interval: 1
                      start: diamond.diamond_agent.tasks.start
                      stop: diamond.diamond_agent.tasks.stop
                      uninstall: diamond.diamond_agent.tasks.uninstall
        cloudify.interfaces.monitoring:
                      start:
                        implementation: diamond.diamond_agent.tasks.add_collectors
                        inputs:
                          collectors_config:
                            CPUCollector: {}
                            MemoryCollector: {}
                            LoadAverageCollector: {}
                            DiskUsageCollector:
                              config:
                                devices: x?vd[a-z]+[0-9]*$
                            NetworkCollector: {}


  mongod:
      type: nodecellar.nodes.MongoDatabase
      properties:
        port: 27017
      interfaces:
        cloudify.interfaces.lifecycle:

          ###########################################################
          # The MongoDBCollector depends on a python library called
          # pymongo. We install this library in the 'configure'
          # lifecycle hook of this node.
          ###########################################################

          configure: scripts/mongo/install-pymongo.sh

        ###########################################################
        # Notice that this node defines an additional collector
        # to collect data on the MongoDB.
        ###########################################################

        cloudify.interfaces.monitoring:
            start:
              implementation: diamond.diamond_agent.tasks.add_collectors
              inputs:
                collectors_config:
                  MongoDBCollector:
                    config:
                      hosts: "localhost:27017"
      relationships:
        - type: cloudify.relationships.contained_in
          target: mongod_vm

  nodejs:
    type: nodecellar.nodes.NodeJSServer
    relationships:
      - type: cloudify.relationships.contained_in
        target: nodejs_vm

  nodecellar:
    type: nodecellar.nodes.NodecellarApplicationModule
    properties:
      port: 8080
    relationships:

      ################################
      # Setting the mongo connection
      ################################

      - type: node_connected_to_mongo
        target: mongod

      ################################
      # Setting the nodejs connection
      ################################

      - type: node_contained_in_nodejs
        target: nodejs

  ###########################################################
  # This outputs section exposes the application endpoint.
  # You can access it by running:
  #   - cfy deployments -d <deployment_id> outputs
  ###########################################################

  outputs:
    endpoint:
      description: Web application endpoint
      value:
        ip_address: { get_attribute: [ nodejs_vm, ip_address ] }
        port: { get_property: [nodecellar, port] }